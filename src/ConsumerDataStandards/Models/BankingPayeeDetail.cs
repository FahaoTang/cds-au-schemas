/*
 * Consumer Data Standards
 *
 * API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ConsumerDataStandards.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BankingPayeeDetail : BankingPayee, IEquatable<BankingPayeeDetail>
    { 
        /// <summary>
        /// Type of object included that describes the payee in detail
        /// </summary>
        /// <value>Type of object included that describes the payee in detail</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PayeeUTypeEnum
        {
            
            /// <summary>
            /// Enum DomesticEnum for domestic
            /// </summary>
            [EnumMember(Value = "domestic")]
            DomesticEnum = 1,
            
            /// <summary>
            /// Enum BillerEnum for biller
            /// </summary>
            [EnumMember(Value = "biller")]
            BillerEnum = 2,
            
            /// <summary>
            /// Enum InternationalEnum for international
            /// </summary>
            [EnumMember(Value = "international")]
            InternationalEnum = 3
        }

        /// <summary>
        /// Type of object included that describes the payee in detail
        /// </summary>
        /// <value>Type of object included that describes the payee in detail</value>
        [Required]
        [DataMember(Name="payeeUType")]
        public PayeeUTypeEnum? PayeeUType { get; set; }

        /// <summary>
        /// Gets or Sets Domestic
        /// </summary>
        [DataMember(Name="domestic")]
        public BankingDomesticPayee Domestic { get; set; }

        /// <summary>
        /// Gets or Sets Biller
        /// </summary>
        [DataMember(Name="biller")]
        public BankingBillerPayee Biller { get; set; }

        /// <summary>
        /// Gets or Sets International
        /// </summary>
        [DataMember(Name="international")]
        public BankingInternationalPayee International { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BankingPayeeDetail {\n");
            sb.Append("  PayeeUType: ").Append(PayeeUType).Append("\n");
            sb.Append("  Domestic: ").Append(Domestic).Append("\n");
            sb.Append("  Biller: ").Append(Biller).Append("\n");
            sb.Append("  International: ").Append(International).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BankingPayeeDetail)obj);
        }

        /// <summary>
        /// Returns true if BankingPayeeDetail instances are equal
        /// </summary>
        /// <param name="other">Instance of BankingPayeeDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankingPayeeDetail other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PayeeUType == other.PayeeUType ||
                    PayeeUType != null &&
                    PayeeUType.Equals(other.PayeeUType)
                ) && 
                (
                    Domestic == other.Domestic ||
                    Domestic != null &&
                    Domestic.Equals(other.Domestic)
                ) && 
                (
                    Biller == other.Biller ||
                    Biller != null &&
                    Biller.Equals(other.Biller)
                ) && 
                (
                    International == other.International ||
                    International != null &&
                    International.Equals(other.International)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PayeeUType != null)
                    hashCode = hashCode * 59 + PayeeUType.GetHashCode();
                    if (Domestic != null)
                    hashCode = hashCode * 59 + Domestic.GetHashCode();
                    if (Biller != null)
                    hashCode = hashCode * 59 + Biller.GetHashCode();
                    if (International != null)
                    hashCode = hashCode * 59 + International.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BankingPayeeDetail left, BankingPayeeDetail right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BankingPayeeDetail left, BankingPayeeDetail right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
