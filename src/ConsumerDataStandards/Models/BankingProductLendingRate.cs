/*
 * Consumer Data Standards
 *
 * API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace ConsumerDataStandards.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BankingProductLendingRate : IEquatable<BankingProductLendingRate>
    { 
        /// <summary>
        /// The type of rate (fixed, variable, etc). See the next section for an overview of valid values and their meaning
        /// </summary>
        /// <value>The type of rate (fixed, variable, etc). See the next section for an overview of valid values and their meaning</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum LendingRateTypeEnum
        {
            
            /// <summary>
            /// Enum FIXEDEnum for FIXED
            /// </summary>
            [EnumMember(Value = "FIXED")]
            FIXEDEnum = 1,
            
            /// <summary>
            /// Enum VARIABLEEnum for VARIABLE
            /// </summary>
            [EnumMember(Value = "VARIABLE")]
            VARIABLEEnum = 2,
            
            /// <summary>
            /// Enum INTRODUCTORYEnum for INTRODUCTORY
            /// </summary>
            [EnumMember(Value = "INTRODUCTORY")]
            INTRODUCTORYEnum = 3,
            
            /// <summary>
            /// Enum DISCOUNTEnum for DISCOUNT
            /// </summary>
            [EnumMember(Value = "DISCOUNT")]
            DISCOUNTEnum = 4,
            
            /// <summary>
            /// Enum PENALTYEnum for PENALTY
            /// </summary>
            [EnumMember(Value = "PENALTY")]
            PENALTYEnum = 5,
            
            /// <summary>
            /// Enum FLOATINGEnum for FLOATING
            /// </summary>
            [EnumMember(Value = "FLOATING")]
            FLOATINGEnum = 6,
            
            /// <summary>
            /// Enum MARKETLINKEDEnum for MARKET_LINKED
            /// </summary>
            [EnumMember(Value = "MARKET_LINKED")]
            MARKETLINKEDEnum = 7,
            
            /// <summary>
            /// Enum CASHADVANCEEnum for CASH_ADVANCE
            /// </summary>
            [EnumMember(Value = "CASH_ADVANCE")]
            CASHADVANCEEnum = 8,
            
            /// <summary>
            /// Enum BUNDLEDISCOUNTFIXEDEnum for BUNDLE_DISCOUNT_FIXED
            /// </summary>
            [EnumMember(Value = "BUNDLE_DISCOUNT_FIXED")]
            BUNDLEDISCOUNTFIXEDEnum = 9,
            
            /// <summary>
            /// Enum BUNDLEDISCOUNTVARIABLEEnum for BUNDLE_DISCOUNT_VARIABLE
            /// </summary>
            [EnumMember(Value = "BUNDLE_DISCOUNT_VARIABLE")]
            BUNDLEDISCOUNTVARIABLEEnum = 10,
            
            /// <summary>
            /// Enum COMPARISONFIXEDEnum for COMPARISON_FIXED
            /// </summary>
            [EnumMember(Value = "COMPARISON_FIXED")]
            COMPARISONFIXEDEnum = 11,
            
            /// <summary>
            /// Enum COMPARISONVARIABLEEnum for COMPARISON_VARIABLE
            /// </summary>
            [EnumMember(Value = "COMPARISON_VARIABLE")]
            COMPARISONVARIABLEEnum = 12
        }

        /// <summary>
        /// The type of rate (fixed, variable, etc). See the next section for an overview of valid values and their meaning
        /// </summary>
        /// <value>The type of rate (fixed, variable, etc). See the next section for an overview of valid values and their meaning</value>
        [Required]
        [DataMember(Name="lendingRateType")]
        public LendingRateTypeEnum? LendingRateType { get; set; }

        /// <summary>
        /// The rate to be applied
        /// </summary>
        /// <value>The rate to be applied</value>
        [Required]
        [DataMember(Name="rate")]
        public string Rate { get; set; }

        /// <summary>
        /// The period after which the rate is applied to the balance to calculate the amount due for the period. Calculation of the amount is often daily (as balances may change) but accumulated until the total amount is &#39;applied&#39; to the account (see applicationFrequency). Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations)
        /// </summary>
        /// <value>The period after which the rate is applied to the balance to calculate the amount due for the period. Calculation of the amount is often daily (as balances may change) but accumulated until the total amount is &#39;applied&#39; to the account (see applicationFrequency). Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations)</value>
        [DataMember(Name="calculationFrequency")]
        public string CalculationFrequency { get; set; }

        /// <summary>
        /// The period after which the calculated amount(s) (see calculationFrequency) are &#39;applied&#39; (i.e. debited or credited) to the account. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations)
        /// </summary>
        /// <value>The period after which the calculated amount(s) (see calculationFrequency) are &#39;applied&#39; (i.e. debited or credited) to the account. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations)</value>
        [DataMember(Name="applicationFrequency")]
        public string ApplicationFrequency { get; set; }

        /// <summary>
        /// When loan payments are due to be paid within each period. The investment benefit of earlier payments affect the rate that can be offered
        /// </summary>
        /// <value>When loan payments are due to be paid within each period. The investment benefit of earlier payments affect the rate that can be offered</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PaymentStructureTypeEnum
        {
            
            /// <summary>
            /// Enum ARREARSEnum for IN_ARREARS
            /// </summary>
            [EnumMember(Value = "IN_ARREARS")]
            ARREARSEnum = 1,
            
            /// <summary>
            /// Enum ADVANCEEnum for IN_ADVANCE
            /// </summary>
            [EnumMember(Value = "IN_ADVANCE")]
            ADVANCEEnum = 2
        }

        /// <summary>
        /// When loan payments are due to be paid within each period. The investment benefit of earlier payments affect the rate that can be offered
        /// </summary>
        /// <value>When loan payments are due to be paid within each period. The investment benefit of earlier payments affect the rate that can be offered</value>
        [DataMember(Name="paymentStructureType")]
        public PaymentStructureTypeEnum? PaymentStructureType { get; set; }

        /// <summary>
        /// Gets or Sets Tier
        /// </summary>
        [DataMember(Name="tier")]
        public BankingProductRateTier Tier { get; set; }

        /// <summary>
        /// Information relevant to the lendingRateType specified.  Whether mandatory or not is dependent on the Generic field containing additional information relevant to the lendingRateType specified. Whether mandatory or not is dependent on the value of lendingRateType
        /// </summary>
        /// <value>Information relevant to the lendingRateType specified.  Whether mandatory or not is dependent on the Generic field containing additional information relevant to the lendingRateType specified. Whether mandatory or not is dependent on the value of lendingRateType</value>
        [DataMember(Name="additionalValue")]
        public string AdditionalValue { get; set; }

        /// <summary>
        /// Display text providing more information on the fee.
        /// </summary>
        /// <value>Display text providing more information on the fee.</value>
        [DataMember(Name="additionalInfo")]
        public string AdditionalInfo { get; set; }

        /// <summary>
        /// Link to a web page with more information  on this fee
        /// </summary>
        /// <value>Link to a web page with more information  on this fee</value>
        [DataMember(Name="additionalInfoUri")]
        public string AdditionalInfoUri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BankingProductLendingRate {\n");
            sb.Append("  LendingRateType: ").Append(LendingRateType).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  CalculationFrequency: ").Append(CalculationFrequency).Append("\n");
            sb.Append("  ApplicationFrequency: ").Append(ApplicationFrequency).Append("\n");
            sb.Append("  PaymentStructureType: ").Append(PaymentStructureType).Append("\n");
            sb.Append("  Tier: ").Append(Tier).Append("\n");
            sb.Append("  AdditionalValue: ").Append(AdditionalValue).Append("\n");
            sb.Append("  AdditionalInfo: ").Append(AdditionalInfo).Append("\n");
            sb.Append("  AdditionalInfoUri: ").Append(AdditionalInfoUri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BankingProductLendingRate)obj);
        }

        /// <summary>
        /// Returns true if BankingProductLendingRate instances are equal
        /// </summary>
        /// <param name="other">Instance of BankingProductLendingRate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankingProductLendingRate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    LendingRateType == other.LendingRateType ||
                    LendingRateType != null &&
                    LendingRateType.Equals(other.LendingRateType)
                ) && 
                (
                    Rate == other.Rate ||
                    Rate != null &&
                    Rate.Equals(other.Rate)
                ) && 
                (
                    CalculationFrequency == other.CalculationFrequency ||
                    CalculationFrequency != null &&
                    CalculationFrequency.Equals(other.CalculationFrequency)
                ) && 
                (
                    ApplicationFrequency == other.ApplicationFrequency ||
                    ApplicationFrequency != null &&
                    ApplicationFrequency.Equals(other.ApplicationFrequency)
                ) && 
                (
                    PaymentStructureType == other.PaymentStructureType ||
                    PaymentStructureType != null &&
                    PaymentStructureType.Equals(other.PaymentStructureType)
                ) && 
                (
                    Tier == other.Tier ||
                    Tier != null &&
                    Tier.Equals(other.Tier)
                ) && 
                (
                    AdditionalValue == other.AdditionalValue ||
                    AdditionalValue != null &&
                    AdditionalValue.Equals(other.AdditionalValue)
                ) && 
                (
                    AdditionalInfo == other.AdditionalInfo ||
                    AdditionalInfo != null &&
                    AdditionalInfo.Equals(other.AdditionalInfo)
                ) && 
                (
                    AdditionalInfoUri == other.AdditionalInfoUri ||
                    AdditionalInfoUri != null &&
                    AdditionalInfoUri.Equals(other.AdditionalInfoUri)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (LendingRateType != null)
                    hashCode = hashCode * 59 + LendingRateType.GetHashCode();
                    if (Rate != null)
                    hashCode = hashCode * 59 + Rate.GetHashCode();
                    if (CalculationFrequency != null)
                    hashCode = hashCode * 59 + CalculationFrequency.GetHashCode();
                    if (ApplicationFrequency != null)
                    hashCode = hashCode * 59 + ApplicationFrequency.GetHashCode();
                    if (PaymentStructureType != null)
                    hashCode = hashCode * 59 + PaymentStructureType.GetHashCode();
                    if (Tier != null)
                    hashCode = hashCode * 59 + Tier.GetHashCode();
                    if (AdditionalValue != null)
                    hashCode = hashCode * 59 + AdditionalValue.GetHashCode();
                    if (AdditionalInfo != null)
                    hashCode = hashCode * 59 + AdditionalInfo.GetHashCode();
                    if (AdditionalInfoUri != null)
                    hashCode = hashCode * 59 + AdditionalInfoUri.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BankingProductLendingRate left, BankingProductLendingRate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BankingProductLendingRate left, BankingProductLendingRate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
