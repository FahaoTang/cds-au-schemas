/*
 * Consumer Data Standards
 *
 * API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using ConsumerDataStandards.Attributes;
using ConsumerDataStandards.Models;

namespace ConsumerDataStandards.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class BankingAPIsApiController : Controller
    { 
        /// <summary>
        /// Get Account Detail
        /// </summary>
        /// <remarks>Obtain detailed information on a single account</remarks>
        /// <param name="accountId">A tokenised identifier for the account which is unique but not shareable</param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/cds-au/v1/banking/accounts/{accountId}")]
        [ValidateModelState]
        [SwaggerOperation("GetAccountDetail")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseBankingAccountById), description: "Success")]
        public virtual IActionResult GetAccountDetail([FromRoute][Required]string accountId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseBankingAccountById));

            string exampleJson = null;
            exampleJson = "{\n  \"data\" : \"\",\n  \"meta\" : { },\n  \"links\" : {\n    \"self\" : \"self\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseBankingAccountById>(exampleJson)
            : default(ResponseBankingAccountById);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Payee Detail
        /// </summary>
        /// <remarks>Obtain detailed information on a single payee</remarks>
        /// <param name="payeeId">The ID used to locate the details of a particular payee</param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/cds-au/v1/banking/payees/{payeeId}")]
        [ValidateModelState]
        [SwaggerOperation("GetPayeeDetail")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseBankingPayeeById), description: "Success")]
        public virtual IActionResult GetPayeeDetail([FromRoute][Required]string payeeId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseBankingPayeeById));

            string exampleJson = null;
            exampleJson = "{\n  \"data\" : \"\",\n  \"meta\" : { },\n  \"links\" : {\n    \"self\" : \"self\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseBankingPayeeById>(exampleJson)
            : default(ResponseBankingPayeeById);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Product Detail
        /// </summary>
        /// <remarks>Obtain detailed information on a single product offered openly to the market</remarks>
        /// <param name="productId">ID of the specific product requested</param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/cds-au/v1/banking/products/{productId}")]
        [ValidateModelState]
        [SwaggerOperation("GetProductDetail")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseBankingProductById), description: "Success")]
        public virtual IActionResult GetProductDetail([FromRoute][Required]string productId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseBankingProductById));

            string exampleJson = null;
            exampleJson = "{\n  \"data\" : \"\",\n  \"meta\" : { },\n  \"links\" : {\n    \"self\" : \"self\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseBankingProductById>(exampleJson)
            : default(ResponseBankingProductById);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Transaction Detail
        /// </summary>
        /// <remarks>Obtain detailed information on a transaction for a specific account</remarks>
        /// <param name="accountId">The account id token that is used to uniquely represent the account</param>
        /// <param name="transactionId">The unique identifier for the specific transaction for which details are being requested</param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/cds-au/v1/banking/accounts/{accountId}/transactions/{transactionId}")]
        [ValidateModelState]
        [SwaggerOperation("GetTransactionDetail")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseBankingTransactionById), description: "Success")]
        public virtual IActionResult GetTransactionDetail([FromRoute][Required]string accountId, [FromRoute][Required]string transactionId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseBankingTransactionById));

            string exampleJson = null;
            exampleJson = "{\n  \"data\" : \"\",\n  \"meta\" : { },\n  \"links\" : {\n    \"self\" : \"self\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseBankingTransactionById>(exampleJson)
            : default(ResponseBankingTransactionById);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Transactions For Account
        /// </summary>
        /// <remarks>Obtain transactions for a specific account Some general notes that apply to all end points that retrieve transactions:  - Where multiple transactions are returned transactions should be ordered according to effective date in descending order - As the date and time for a transaction can alter depending on status and transaction type two separate date/times are included in the payload. There are still some scenarios where neither of these time stamps is available. For the purpose of filtering and ordering it is expected that the provider will use the “effective” date/time which will be defined as:   - Posted date/time if available, then   - Execution date/time if available, then   - A reasonable date/time nominated by the data provider using internal data structures - For transaction amounts it should be assumed that a negative value indicates a reduction of the available balance on the account while a positive value indicates an increase in the available balance on the account</remarks>
        /// <param name="accountId">ID of the account to get transactions for.  Must have previously been returned by one of the account list end points.</param>
        /// <param name="startTime">Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to current time. Format is aligned to DateTimeString common type</param>
        /// <param name="endTime">Constrain the transaction history request to transactions with effective time at or before this date/time. If absent defaults to start-time plus 100 days. Format is aligned to DateTimeString common type</param>
        /// <param name="minAmount">Filter transactions to only transactions with amounts higher or equal to than this amount</param>
        /// <param name="maxAmount">Filter transactions to only transactions with amounts less than or equal to than this amount</param>
        /// <param name="text">Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string</param>
        /// <param name="page">Page of results to request (standard pagination)</param>
        /// <param name="pageSize">Page size to request. Default is 25 (standard pagination)</param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/cds-au/v1/banking/accounts/{accountId}/transactions")]
        [ValidateModelState]
        [SwaggerOperation("GetTransactions")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseBankingTransactionList), description: "Success")]
        public virtual IActionResult GetTransactions([FromRoute][Required]string accountId, [FromQuery]string startTime, [FromQuery]string endTime, [FromQuery]string minAmount, [FromQuery]string maxAmount, [FromQuery]string text, [FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseBankingTransactionList));

            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"transactions\" : [ {\n      \"postingDateTime\" : \"postingDateTime\",\n      \"amount\" : \"amount\",\n      \"apcaNumber\" : \"apcaNumber\",\n      \"isDetailAvailable\" : true,\n      \"description\" : \"description\",\n      \"type\" : \"FEE\",\n      \"billerName\" : \"billerName\",\n      \"executionDateTime\" : \"executionDateTime\",\n      \"transactionId\" : \"transactionId\",\n      \"merchantName\" : \"merchantName\",\n      \"billerCode\" : \"billerCode\",\n      \"reference\" : \"reference\",\n      \"accountId\" : \"accountId\",\n      \"merchantCategoryCode\" : \"merchantCategoryCode\",\n      \"valueDateTime\" : \"valueDateTime\",\n      \"currency\" : \"currency\",\n      \"crn\" : \"crn\",\n      \"status\" : \"PENDING\"\n    }, {\n      \"postingDateTime\" : \"postingDateTime\",\n      \"amount\" : \"amount\",\n      \"apcaNumber\" : \"apcaNumber\",\n      \"isDetailAvailable\" : true,\n      \"description\" : \"description\",\n      \"type\" : \"FEE\",\n      \"billerName\" : \"billerName\",\n      \"executionDateTime\" : \"executionDateTime\",\n      \"transactionId\" : \"transactionId\",\n      \"merchantName\" : \"merchantName\",\n      \"billerCode\" : \"billerCode\",\n      \"reference\" : \"reference\",\n      \"accountId\" : \"accountId\",\n      \"merchantCategoryCode\" : \"merchantCategoryCode\",\n      \"valueDateTime\" : \"valueDateTime\",\n      \"currency\" : \"currency\",\n      \"crn\" : \"crn\",\n      \"status\" : \"PENDING\"\n    } ]\n  },\n  \"meta\" : {\n    \"totalRecords\" : 0,\n    \"totalPages\" : 6\n  },\n  \"links\" : {\n    \"next\" : \"next\",\n    \"last\" : \"last\",\n    \"prev\" : \"prev\",\n    \"self\" : \"self\",\n    \"first\" : \"first\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseBankingTransactionList>(exampleJson)
            : default(ResponseBankingTransactionList);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Accounts
        /// </summary>
        /// <remarks>Obtain a list of accounts</remarks>
        /// <param name="openStatus">Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed</param>
        /// <param name="isOwned">Filters accounts based on whether they are owned by the authorised customer</param>
        /// <param name="productCategory">Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned.</param>
        /// <param name="page">Page of results to request (standard pagination)</param>
        /// <param name="pageSize">Page size to request. Default is 25 (standard pagination)</param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/cds-au/v1/banking/accounts")]
        [ValidateModelState]
        [SwaggerOperation("ListAccounts")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseBankingAccountList), description: "Success")]
        public virtual IActionResult ListAccounts([FromQuery]string openStatus, [FromQuery]string isOwned, [FromQuery]string productCategory, [FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseBankingAccountList));

            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"accounts\" : [ {\n      \"accountId\" : \"accountId\",\n      \"maskedNumber\" : \"maskedNumber\",\n      \"openStatus\" : \"OPEN\",\n      \"displayName\" : \"displayName\",\n      \"isOwned\" : true,\n      \"nickname\" : \"nickname\",\n      \"productName\" : \"productName\",\n      \"productCategory\" : { }\n    }, {\n      \"accountId\" : \"accountId\",\n      \"maskedNumber\" : \"maskedNumber\",\n      \"openStatus\" : \"OPEN\",\n      \"displayName\" : \"displayName\",\n      \"isOwned\" : true,\n      \"nickname\" : \"nickname\",\n      \"productName\" : \"productName\",\n      \"productCategory\" : { }\n    } ]\n  },\n  \"meta\" : {\n    \"totalRecords\" : 0,\n    \"totalPages\" : 6\n  },\n  \"links\" : {\n    \"next\" : \"next\",\n    \"last\" : \"last\",\n    \"prev\" : \"prev\",\n    \"self\" : \"self\",\n    \"first\" : \"first\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseBankingAccountList>(exampleJson)
            : default(ResponseBankingAccountList);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Bulk Balances
        /// </summary>
        /// <remarks>Obtain balances for multiple, filtered accounts</remarks>
        /// <param name="openStatus">Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed</param>
        /// <param name="isOwned">Filters accounts based on whether they are owned by the authorised customer</param>
        /// <param name="productCategory">Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned.</param>
        /// <param name="page">Page of results to request (standard pagination)</param>
        /// <param name="pageSize">Page size to request. Default is 25 (standard pagination)</param>
        /// <response code="200">resource listing the financial balances for the account</response>
        [HttpGet]
        [Route("/cds-au/v1/banking/accounts/balances")]
        [ValidateModelState]
        [SwaggerOperation("ListBalancesBulk")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseBankingAccountsBalanceList), description: "resource listing the financial balances for the account")]
        public virtual IActionResult ListBalancesBulk([FromQuery]string openStatus, [FromQuery]string isOwned, [FromQuery]string productCategory, [FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseBankingAccountsBalanceList));

            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"balances\" : [ {\n      \"accountId\" : \"accountId\",\n      \"purses\" : [ {\n        \"amount\" : \"amount\",\n        \"currency\" : \"currency\"\n      }, {\n        \"amount\" : \"amount\",\n        \"currency\" : \"currency\"\n      } ],\n      \"lending\" : {\n        \"amortisedLimit\" : {\n          \"amount\" : \"amount\",\n          \"currency\" : \"currency\"\n        },\n        \"creditLimit\" : {\n          \"amount\" : \"amount\",\n          \"currency\" : \"currency\"\n        },\n        \"accountBalance\" : {\n          \"amount\" : \"amount\",\n          \"currency\" : \"currency\"\n        },\n        \"availableBalance\" : {\n          \"amount\" : \"amount\",\n          \"currency\" : \"currency\"\n        }\n      },\n      \"deposit\" : {\n        \"currentBalance\" : {\n          \"amount\" : \"amount\",\n          \"currency\" : \"currency\"\n        },\n        \"availableBalance\" : {\n          \"amount\" : \"amount\",\n          \"currency\" : \"currency\"\n        }\n      },\n      \"balanceUType\" : \"deposit\"\n    }, {\n      \"accountId\" : \"accountId\",\n      \"purses\" : [ {\n        \"amount\" : \"amount\",\n        \"currency\" : \"currency\"\n      }, {\n        \"amount\" : \"amount\",\n        \"currency\" : \"currency\"\n      } ],\n      \"lending\" : {\n        \"amortisedLimit\" : {\n          \"amount\" : \"amount\",\n          \"currency\" : \"currency\"\n        },\n        \"creditLimit\" : {\n          \"amount\" : \"amount\",\n          \"currency\" : \"currency\"\n        },\n        \"accountBalance\" : {\n          \"amount\" : \"amount\",\n          \"currency\" : \"currency\"\n        },\n        \"availableBalance\" : {\n          \"amount\" : \"amount\",\n          \"currency\" : \"currency\"\n        }\n      },\n      \"deposit\" : {\n        \"currentBalance\" : {\n          \"amount\" : \"amount\",\n          \"currency\" : \"currency\"\n        },\n        \"availableBalance\" : {\n          \"amount\" : \"amount\",\n          \"currency\" : \"currency\"\n        }\n      },\n      \"balanceUType\" : \"deposit\"\n    } ]\n  },\n  \"meta\" : {\n    \"totalRecords\" : 0,\n    \"totalPages\" : 6\n  },\n  \"links\" : {\n    \"next\" : \"next\",\n    \"last\" : \"last\",\n    \"prev\" : \"prev\",\n    \"self\" : \"self\",\n    \"first\" : \"first\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseBankingAccountsBalanceList>(exampleJson)
            : default(ResponseBankingAccountsBalanceList);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Balances For Specific Accounts
        /// </summary>
        /// <remarks>Obtain balances for a specified list of accounts</remarks>
        /// <param name="accountIds">The list of account IDs to obtain information for</param>
        /// <param name="page">Page of results to request (standard pagination)</param>
        /// <param name="pageSize">Page size to request. Default is 25 (standard pagination)</param>
        /// <response code="200">Success</response>
        /// <response code="422">The request was well formed but was unable to be processed due to business logic specific to the request</response>
        [HttpPost]
        [Route("/cds-au/v1/banking/accounts/balances")]
        [ValidateModelState]
        [SwaggerOperation("ListBalancesSpecificAccounts")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseBankingAccountsBalanceList), description: "Success")]
        [SwaggerResponse(statusCode: 422, type: typeof(ResponseErrorList), description: "The request was well formed but was unable to be processed due to business logic specific to the request")]
        public virtual IActionResult ListBalancesSpecificAccounts([FromBody]RequestAccountIds accountIds, [FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseBankingAccountsBalanceList));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ResponseErrorList));

            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"balances\" : [ {\n      \"accountId\" : \"accountId\",\n      \"purses\" : [ {\n        \"amount\" : \"amount\",\n        \"currency\" : \"currency\"\n      }, {\n        \"amount\" : \"amount\",\n        \"currency\" : \"currency\"\n      } ],\n      \"lending\" : {\n        \"amortisedLimit\" : {\n          \"amount\" : \"amount\",\n          \"currency\" : \"currency\"\n        },\n        \"creditLimit\" : {\n          \"amount\" : \"amount\",\n          \"currency\" : \"currency\"\n        },\n        \"accountBalance\" : {\n          \"amount\" : \"amount\",\n          \"currency\" : \"currency\"\n        },\n        \"availableBalance\" : {\n          \"amount\" : \"amount\",\n          \"currency\" : \"currency\"\n        }\n      },\n      \"deposit\" : {\n        \"currentBalance\" : {\n          \"amount\" : \"amount\",\n          \"currency\" : \"currency\"\n        },\n        \"availableBalance\" : {\n          \"amount\" : \"amount\",\n          \"currency\" : \"currency\"\n        }\n      },\n      \"balanceUType\" : \"deposit\"\n    }, {\n      \"accountId\" : \"accountId\",\n      \"purses\" : [ {\n        \"amount\" : \"amount\",\n        \"currency\" : \"currency\"\n      }, {\n        \"amount\" : \"amount\",\n        \"currency\" : \"currency\"\n      } ],\n      \"lending\" : {\n        \"amortisedLimit\" : {\n          \"amount\" : \"amount\",\n          \"currency\" : \"currency\"\n        },\n        \"creditLimit\" : {\n          \"amount\" : \"amount\",\n          \"currency\" : \"currency\"\n        },\n        \"accountBalance\" : {\n          \"amount\" : \"amount\",\n          \"currency\" : \"currency\"\n        },\n        \"availableBalance\" : {\n          \"amount\" : \"amount\",\n          \"currency\" : \"currency\"\n        }\n      },\n      \"deposit\" : {\n        \"currentBalance\" : {\n          \"amount\" : \"amount\",\n          \"currency\" : \"currency\"\n        },\n        \"availableBalance\" : {\n          \"amount\" : \"amount\",\n          \"currency\" : \"currency\"\n        }\n      },\n      \"balanceUType\" : \"deposit\"\n    } ]\n  },\n  \"meta\" : {\n    \"totalRecords\" : 0,\n    \"totalPages\" : 6\n  },\n  \"links\" : {\n    \"next\" : \"next\",\n    \"last\" : \"last\",\n    \"prev\" : \"prev\",\n    \"self\" : \"self\",\n    \"first\" : \"first\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseBankingAccountsBalanceList>(exampleJson)
            : default(ResponseBankingAccountsBalanceList);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Direct Debits For Account
        /// </summary>
        /// <remarks>Obtain direct debit authorisations for a specific account</remarks>
        /// <param name="accountId">ID of the account to get direct debit authorisations for.  Must have previously been returned by one of the account list end points.</param>
        /// <param name="page">Page of results to request (standard pagination)</param>
        /// <param name="pageSize">Page size to request. Default is 25 (standard pagination)</param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/cds-au/v1/banking/accounts/{accountId}/direct-debits")]
        [ValidateModelState]
        [SwaggerOperation("ListDirectDebits")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseBankingDirectDebitAuthorisationList), description: "Success")]
        public virtual IActionResult ListDirectDebits([FromRoute][Required]string accountId, [FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseBankingDirectDebitAuthorisationList));

            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"directDebitAuthorisations\" : [ {\n      \"lastDebitAmount\" : \"lastDebitAmount\",\n      \"accountId\" : \"accountId\",\n      \"lastDebitDateTime\" : \"lastDebitDateTime\",\n      \"authorisedEntity\" : {\n        \"arbn\" : \"arbn\",\n        \"name\" : \"name\",\n        \"financialInstitution\" : \"financialInstitution\",\n        \"abn\" : \"abn\",\n        \"acn\" : \"acn\"\n      }\n    }, {\n      \"lastDebitAmount\" : \"lastDebitAmount\",\n      \"accountId\" : \"accountId\",\n      \"lastDebitDateTime\" : \"lastDebitDateTime\",\n      \"authorisedEntity\" : {\n        \"arbn\" : \"arbn\",\n        \"name\" : \"name\",\n        \"financialInstitution\" : \"financialInstitution\",\n        \"abn\" : \"abn\",\n        \"acn\" : \"acn\"\n      }\n    } ]\n  },\n  \"meta\" : {\n    \"totalRecords\" : 0,\n    \"totalPages\" : 6\n  },\n  \"links\" : {\n    \"next\" : \"next\",\n    \"last\" : \"last\",\n    \"prev\" : \"prev\",\n    \"self\" : \"self\",\n    \"first\" : \"first\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseBankingDirectDebitAuthorisationList>(exampleJson)
            : default(ResponseBankingDirectDebitAuthorisationList);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Bulk Direct Debits
        /// </summary>
        /// <remarks>Obtain direct debit authorisations for multiple, filtered accounts</remarks>
        /// <param name="isOwned">Filters accounts based on whether they are owned by the authorised customer</param>
        /// <param name="productCategory">Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned.</param>
        /// <param name="page">Page of results to request (standard pagination)</param>
        /// <param name="pageSize">Page size to request. Default is 25 (standard pagination)</param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/cds-au/v1/banking/accounts/direct-debits")]
        [ValidateModelState]
        [SwaggerOperation("ListDirectDebitsBulk")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseBankingDirectDebitAuthorisationList), description: "Success")]
        public virtual IActionResult ListDirectDebitsBulk([FromQuery]string isOwned, [FromQuery]string productCategory, [FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseBankingDirectDebitAuthorisationList));

            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"directDebitAuthorisations\" : [ {\n      \"lastDebitAmount\" : \"lastDebitAmount\",\n      \"accountId\" : \"accountId\",\n      \"lastDebitDateTime\" : \"lastDebitDateTime\",\n      \"authorisedEntity\" : {\n        \"arbn\" : \"arbn\",\n        \"name\" : \"name\",\n        \"financialInstitution\" : \"financialInstitution\",\n        \"abn\" : \"abn\",\n        \"acn\" : \"acn\"\n      }\n    }, {\n      \"lastDebitAmount\" : \"lastDebitAmount\",\n      \"accountId\" : \"accountId\",\n      \"lastDebitDateTime\" : \"lastDebitDateTime\",\n      \"authorisedEntity\" : {\n        \"arbn\" : \"arbn\",\n        \"name\" : \"name\",\n        \"financialInstitution\" : \"financialInstitution\",\n        \"abn\" : \"abn\",\n        \"acn\" : \"acn\"\n      }\n    } ]\n  },\n  \"meta\" : {\n    \"totalRecords\" : 0,\n    \"totalPages\" : 6\n  },\n  \"links\" : {\n    \"next\" : \"next\",\n    \"last\" : \"last\",\n    \"prev\" : \"prev\",\n    \"self\" : \"self\",\n    \"first\" : \"first\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseBankingDirectDebitAuthorisationList>(exampleJson)
            : default(ResponseBankingDirectDebitAuthorisationList);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Direct Debits For Specific Accounts
        /// </summary>
        /// <remarks>Obtain direct debit authorisations for a specified list of accounts</remarks>
        /// <param name="accountIds">The list of account IDs to obtain information for</param>
        /// <param name="page">Page of results to request (standard pagination)</param>
        /// <param name="pageSize">Page size to request. Default is 25 (standard pagination)</param>
        /// <response code="200">Success</response>
        /// <response code="422">The request was well formed but was unable to be processed due to business logic specific to the request</response>
        [HttpPost]
        [Route("/cds-au/v1/banking/accounts/direct-debits")]
        [ValidateModelState]
        [SwaggerOperation("ListDirectDebitsSpecificAccounts")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseBankingDirectDebitAuthorisationList), description: "Success")]
        [SwaggerResponse(statusCode: 422, type: typeof(ResponseErrorList), description: "The request was well formed but was unable to be processed due to business logic specific to the request")]
        public virtual IActionResult ListDirectDebitsSpecificAccounts([FromBody]RequestAccountIds accountIds, [FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseBankingDirectDebitAuthorisationList));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ResponseErrorList));

            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"directDebitAuthorisations\" : [ {\n      \"lastDebitAmount\" : \"lastDebitAmount\",\n      \"accountId\" : \"accountId\",\n      \"lastDebitDateTime\" : \"lastDebitDateTime\",\n      \"authorisedEntity\" : {\n        \"arbn\" : \"arbn\",\n        \"name\" : \"name\",\n        \"financialInstitution\" : \"financialInstitution\",\n        \"abn\" : \"abn\",\n        \"acn\" : \"acn\"\n      }\n    }, {\n      \"lastDebitAmount\" : \"lastDebitAmount\",\n      \"accountId\" : \"accountId\",\n      \"lastDebitDateTime\" : \"lastDebitDateTime\",\n      \"authorisedEntity\" : {\n        \"arbn\" : \"arbn\",\n        \"name\" : \"name\",\n        \"financialInstitution\" : \"financialInstitution\",\n        \"abn\" : \"abn\",\n        \"acn\" : \"acn\"\n      }\n    } ]\n  },\n  \"meta\" : {\n    \"totalRecords\" : 0,\n    \"totalPages\" : 6\n  },\n  \"links\" : {\n    \"next\" : \"next\",\n    \"last\" : \"last\",\n    \"prev\" : \"prev\",\n    \"self\" : \"self\",\n    \"first\" : \"first\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseBankingDirectDebitAuthorisationList>(exampleJson)
            : default(ResponseBankingDirectDebitAuthorisationList);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Payees
        /// </summary>
        /// <remarks>Obtain a list of pre-registered payees</remarks>
        /// <param name="type">Filter on the payee type field.  In addition to normal type field values, ALL can be specified to retrieve all payees.  If absent the assumed value is ALL</param>
        /// <param name="page">Page of results to request (standard pagination)</param>
        /// <param name="pageSize">Page size to request. Default is 25 (standard pagination)</param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/cds-au/v1/banking/payees")]
        [ValidateModelState]
        [SwaggerOperation("ListPayees")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseBankingPayeeList), description: "Success")]
        public virtual IActionResult ListPayees([FromQuery]string type, [FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseBankingPayeeList));

            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"payees\" : [ {\n      \"nickname\" : \"nickname\",\n      \"description\" : \"description\",\n      \"payeeId\" : \"payeeId\",\n      \"type\" : \"DOMESTIC\",\n      \"creationDate\" : \"creationDate\"\n    }, {\n      \"nickname\" : \"nickname\",\n      \"description\" : \"description\",\n      \"payeeId\" : \"payeeId\",\n      \"type\" : \"DOMESTIC\",\n      \"creationDate\" : \"creationDate\"\n    } ]\n  },\n  \"meta\" : {\n    \"totalRecords\" : 0,\n    \"totalPages\" : 6\n  },\n  \"links\" : {\n    \"next\" : \"next\",\n    \"last\" : \"last\",\n    \"prev\" : \"prev\",\n    \"self\" : \"self\",\n    \"first\" : \"first\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseBankingPayeeList>(exampleJson)
            : default(ResponseBankingPayeeList);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Products
        /// </summary>
        /// <remarks>Obtain a list of products that are currently openly offered to the market  Note that the results returned by this end point are expected to be ordered according to updated-since  ### Conventions In the product reference payloads there are a number of recurring conventions that are explained here, in one place.  #### Arrays Of Features  In the product detail payload there are a number of arrays articulating generic features, constraints, prices, etc. The intent of these arrays is as follows:  - Each element in an array has the same structure so that clients can reliably interpret the payloads - Each element as a type element that is an enumeration of the specific aspect of a product being described, such as types of fees. - Each element has a field name additionalValue. This is a generic field with contents that will vary based on the type of object being described. The contents of this field for the ADDITIONAL_CARDS feature is the number of cards allowed while the contents of this field for the MAX_LIMIT constraint would be the maximum credit limit allowed for the product. - An element in these arrays of the same type may appear more than once. For instance, a product may offer two separate loyalty programs that the customer can select from. A fixed term mortgage may have different rates for different term lengths. - An element in these arrays may contain an additionalInfo and additionalInfoUri field. The additionalInfo field is used to provide displayable text clarifying the purpose of the element in some way when the product is presented to a customer. The additionalInfoUri provides a link to externally hosted information specifically relevant to that feature of the product.  #### URIs To More Information  As the complexities and nuances of a financial product can not easily be fully expressed in a data structure without a high degree of complexity it is necessary to provide additional reference information that a potential customer can access so that they are fully informed of the features and implications of the product. The payloads for product reference therefore contain numerous fields that are provided to allow the product provider to describe the product more fully using a web page hosted on their on channels.  These URIs do not need to all link to different pages. If desired, they can all link to a single hosted page and use difference HTML anchors to focus on a specific topic such as eligibility or fees.  #### Linkage To Accounts From the moment that a customer applies for a product and an account is created the account and the product that spawned it will diverge. Rates and features of the product may change and a discount may be negotiated for the account.  For this reason productCategory is a common field between accounts and products but there is not common linkage field specific to a product that appears within the account payloads.  Similarly, many of the fields and objects in the product payload will appear in the account detail payload but the full sets of options are not identical between the two entities.  #### Dates It is expected that data consumers needing this data will call relatively frequently to ensure the data they have is representative of the current offering from a bank. To minimise the volume and frequency of these calls the ability to set a lastUpdated field with the date and time of the last update to this product is included. A call for a list of products can then be filtered to only return products that have been updated since the last time that data was obtained.  In addition the concept of effective date and time has also been included. This allows for a product to be marked for obsolescence, or introduction, from a certain time without the need for an update to show that a product has been changed. The inclusion of these dates also removes the need to represent deleted products in the payload. Products that are no long offered can be marked not effective for a few weeks before they are then removed from the product set as an option entirely.</remarks>
        /// <param name="effective">Allows for the filtering of products based on whether the current time is within the period of time defined as effective by the effectiveFrom and effectiveTo fields.  If absent defaults to &#39;CURRENT&#39;</param>
        /// <param name="updatedSince">Only include products that have been updated after the specified date and time. If absent defaults to include all products</param>
        /// <param name="brand">Filter results based on a specific brand</param>
        /// <param name="productCategory">Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned.</param>
        /// <param name="page">Page of results to request (standard pagination)</param>
        /// <param name="pageSize">Page size to request. Default is 25 (standard pagination)</param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/cds-au/v1/banking/products")]
        [ValidateModelState]
        [SwaggerOperation("ListProducts")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseBankingProductList), description: "Success")]
        public virtual IActionResult ListProducts([FromQuery]string effective, [FromQuery]string updatedSince, [FromQuery]string brand, [FromQuery]string productCategory, [FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseBankingProductList));

            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"products\" : [ {\n      \"effectiveTo\" : \"effectiveTo\",\n      \"lastUpdated\" : \"lastUpdated\",\n      \"additionalInformation\" : {\n        \"eligibilityUri\" : \"eligibilityUri\",\n        \"bundleUri\" : \"bundleUri\",\n        \"feesAndPricingUri\" : \"feesAndPricingUri\",\n        \"termsUri\" : \"termsUri\",\n        \"overviewUri\" : \"overviewUri\"\n      },\n      \"brandName\" : \"brandName\",\n      \"isTailored\" : true,\n      \"productId\" : \"productId\",\n      \"name\" : \"name\",\n      \"description\" : \"description\",\n      \"applicationUri\" : \"applicationUri\",\n      \"effectiveFrom\" : \"effectiveFrom\",\n      \"brand\" : \"brand\",\n      \"productCategory\" : { }\n    }, {\n      \"effectiveTo\" : \"effectiveTo\",\n      \"lastUpdated\" : \"lastUpdated\",\n      \"additionalInformation\" : {\n        \"eligibilityUri\" : \"eligibilityUri\",\n        \"bundleUri\" : \"bundleUri\",\n        \"feesAndPricingUri\" : \"feesAndPricingUri\",\n        \"termsUri\" : \"termsUri\",\n        \"overviewUri\" : \"overviewUri\"\n      },\n      \"brandName\" : \"brandName\",\n      \"isTailored\" : true,\n      \"productId\" : \"productId\",\n      \"name\" : \"name\",\n      \"description\" : \"description\",\n      \"applicationUri\" : \"applicationUri\",\n      \"effectiveFrom\" : \"effectiveFrom\",\n      \"brand\" : \"brand\",\n      \"productCategory\" : { }\n    } ]\n  },\n  \"meta\" : {\n    \"totalRecords\" : 0,\n    \"totalPages\" : 6\n  },\n  \"links\" : {\n    \"next\" : \"next\",\n    \"last\" : \"last\",\n    \"prev\" : \"prev\",\n    \"self\" : \"self\",\n    \"first\" : \"first\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseBankingProductList>(exampleJson)
            : default(ResponseBankingProductList);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Transactions For Multiple Accounts
        /// </summary>
        /// <remarks>Obtain transactions for multiple, filtered accounts</remarks>
        /// <param name="openStatus">Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed</param>
        /// <param name="isOwned">Filters accounts based on whether they are owned by the authorised customer</param>
        /// <param name="productCategory">Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned.</param>
        /// <param name="startTime">Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to current time. Format is aligned to DateTimeString common type</param>
        /// <param name="endTime">Constrain the transaction history request to transactions with effective time at or before this date/time. If absent defaults to start-time plus 100 days. Format is aligned to DateTimeString common type</param>
        /// <param name="minAmount">Filter transactions to only transactions with amounts higher or equal to than this amount</param>
        /// <param name="maxAmount">Filter transactions to only transactions with amounts less than or equal to than this amount</param>
        /// <param name="text">Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string</param>
        /// <param name="page">Page of results to request (standard pagination)</param>
        /// <param name="pageSize">Page size to request. Default is 25 (standard pagination)</param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/cds-au/v1/banking/accounts/transactions")]
        [ValidateModelState]
        [SwaggerOperation("ListTransactionsBulk")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseBankingTransactionList), description: "Success")]
        public virtual IActionResult ListTransactionsBulk([FromQuery]string openStatus, [FromQuery]string isOwned, [FromQuery]string productCategory, [FromQuery]string startTime, [FromQuery]string endTime, [FromQuery]string minAmount, [FromQuery]string maxAmount, [FromQuery]string text, [FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseBankingTransactionList));

            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"transactions\" : [ {\n      \"postingDateTime\" : \"postingDateTime\",\n      \"amount\" : \"amount\",\n      \"apcaNumber\" : \"apcaNumber\",\n      \"isDetailAvailable\" : true,\n      \"description\" : \"description\",\n      \"type\" : \"FEE\",\n      \"billerName\" : \"billerName\",\n      \"executionDateTime\" : \"executionDateTime\",\n      \"transactionId\" : \"transactionId\",\n      \"merchantName\" : \"merchantName\",\n      \"billerCode\" : \"billerCode\",\n      \"reference\" : \"reference\",\n      \"accountId\" : \"accountId\",\n      \"merchantCategoryCode\" : \"merchantCategoryCode\",\n      \"valueDateTime\" : \"valueDateTime\",\n      \"currency\" : \"currency\",\n      \"crn\" : \"crn\",\n      \"status\" : \"PENDING\"\n    }, {\n      \"postingDateTime\" : \"postingDateTime\",\n      \"amount\" : \"amount\",\n      \"apcaNumber\" : \"apcaNumber\",\n      \"isDetailAvailable\" : true,\n      \"description\" : \"description\",\n      \"type\" : \"FEE\",\n      \"billerName\" : \"billerName\",\n      \"executionDateTime\" : \"executionDateTime\",\n      \"transactionId\" : \"transactionId\",\n      \"merchantName\" : \"merchantName\",\n      \"billerCode\" : \"billerCode\",\n      \"reference\" : \"reference\",\n      \"accountId\" : \"accountId\",\n      \"merchantCategoryCode\" : \"merchantCategoryCode\",\n      \"valueDateTime\" : \"valueDateTime\",\n      \"currency\" : \"currency\",\n      \"crn\" : \"crn\",\n      \"status\" : \"PENDING\"\n    } ]\n  },\n  \"meta\" : {\n    \"totalRecords\" : 0,\n    \"totalPages\" : 6\n  },\n  \"links\" : {\n    \"next\" : \"next\",\n    \"last\" : \"last\",\n    \"prev\" : \"prev\",\n    \"self\" : \"self\",\n    \"first\" : \"first\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseBankingTransactionList>(exampleJson)
            : default(ResponseBankingTransactionList);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Transactions For Specific Accounts
        /// </summary>
        /// <remarks>Obtain transactions for a specified list of transactions.</remarks>
        /// <param name="accountIds">The list of account IDs to obtain information for</param>
        /// <param name="startTime">Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to current time. Format is aligned to DateTimeString common type</param>
        /// <param name="endTime">Constrain the transaction history request to transactions with effective time at or before this date/time. If absent defaults to start-time plus 100 days. Format is aligned to DateTimeString common type</param>
        /// <param name="minAmount">Filter transactions to only transactions with amounts higher or equal to than this amount</param>
        /// <param name="maxAmount">Filter transactions to only transactions with amounts less than or equal to than this amount</param>
        /// <param name="text">Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string</param>
        /// <param name="page">Page of results to request (standard pagination)</param>
        /// <param name="pageSize">Page size to request. Default is 25 (standard pagination)</param>
        /// <response code="200">Success</response>
        /// <response code="422">The request was well formed but was unable to be processed due to business logic specific to the request</response>
        [HttpPost]
        [Route("/cds-au/v1/banking/accounts/transactions")]
        [ValidateModelState]
        [SwaggerOperation("ListTransactionsSpecificAccounts")]
        [SwaggerResponse(statusCode: 200, type: typeof(ResponseBankingTransactionList), description: "Success")]
        [SwaggerResponse(statusCode: 422, type: typeof(ResponseErrorList), description: "The request was well formed but was unable to be processed due to business logic specific to the request")]
        public virtual IActionResult ListTransactionsSpecificAccounts([FromBody]RequestAccountIds accountIds, [FromQuery]string startTime, [FromQuery]string endTime, [FromQuery]string minAmount, [FromQuery]string maxAmount, [FromQuery]string text, [FromQuery]int? page, [FromQuery]int? pageSize)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ResponseBankingTransactionList));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ResponseErrorList));

            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"transactions\" : [ {\n      \"postingDateTime\" : \"postingDateTime\",\n      \"amount\" : \"amount\",\n      \"apcaNumber\" : \"apcaNumber\",\n      \"isDetailAvailable\" : true,\n      \"description\" : \"description\",\n      \"type\" : \"FEE\",\n      \"billerName\" : \"billerName\",\n      \"executionDateTime\" : \"executionDateTime\",\n      \"transactionId\" : \"transactionId\",\n      \"merchantName\" : \"merchantName\",\n      \"billerCode\" : \"billerCode\",\n      \"reference\" : \"reference\",\n      \"accountId\" : \"accountId\",\n      \"merchantCategoryCode\" : \"merchantCategoryCode\",\n      \"valueDateTime\" : \"valueDateTime\",\n      \"currency\" : \"currency\",\n      \"crn\" : \"crn\",\n      \"status\" : \"PENDING\"\n    }, {\n      \"postingDateTime\" : \"postingDateTime\",\n      \"amount\" : \"amount\",\n      \"apcaNumber\" : \"apcaNumber\",\n      \"isDetailAvailable\" : true,\n      \"description\" : \"description\",\n      \"type\" : \"FEE\",\n      \"billerName\" : \"billerName\",\n      \"executionDateTime\" : \"executionDateTime\",\n      \"transactionId\" : \"transactionId\",\n      \"merchantName\" : \"merchantName\",\n      \"billerCode\" : \"billerCode\",\n      \"reference\" : \"reference\",\n      \"accountId\" : \"accountId\",\n      \"merchantCategoryCode\" : \"merchantCategoryCode\",\n      \"valueDateTime\" : \"valueDateTime\",\n      \"currency\" : \"currency\",\n      \"crn\" : \"crn\",\n      \"status\" : \"PENDING\"\n    } ]\n  },\n  \"meta\" : {\n    \"totalRecords\" : 0,\n    \"totalPages\" : 6\n  },\n  \"links\" : {\n    \"next\" : \"next\",\n    \"last\" : \"last\",\n    \"prev\" : \"prev\",\n    \"self\" : \"self\",\n    \"first\" : \"first\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ResponseBankingTransactionList>(exampleJson)
            : default(ResponseBankingTransactionList);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
